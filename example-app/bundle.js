(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

// NOTE: App.js must be bundled with Browserify and
// Jadeify before use. Use the gulp bundle or gulp watch
// commands to generate bundle.js.

(function() {


	// =========================
	// Query Builder Example App
	// =========================


	// Models
	// ==================================================
	// Each model represents a single SQL clause defined
	// by the user. I.e. each SELECT, JOIN, WHERE, etc.
	// is represented as a model in a Backbone
	// collection.

	var Join   = Backbone.Model.extend();
	var Select = Backbone.Model.extend();
	var Where  = Backbone.Model.extend();

	// The "Table" model is a special case. It represents
	// a table defined in the schema.

	var Table = Backbone.Model.extend({
		idAttribute: 'name',
	});


	// Set Attributes
	// ==================================================
	// Every time a user enters input, setAttribute is 
	// called on the related model to apply data from the
	// DOM to the model. "Selection" is a jquery selector
	// for a row of inputs/selects.

	Join.prototype.setAttributes = function(selection) {
		this.set({
			name   : $(selection[0]).val(),
			joinId : $(selection[0].options[selection[0].selectedIndex]).data('join-id'),
			as     : $(selection[0].options[selection[0].selectedIndex]).text()
		});
	};

	Select.prototype.setAttributes = function(selection) {
		this.set({
			joinId    : $(selection[0].options[selection[0].selectedIndex]).data('join-id'),
			name      : $(selection[0]).val(),
			functions : $(selection[1]).val() || undefined,
			groupBy   : $(selection[2]).is(':checked')
		});
	};

	Where.prototype.setAttributes = function(selection) {
		this.set({ 
			field: {
				name   : $(selection[0]).val(),
				joinId : $(selection[0].options[selection[0].selectedIndex]).data('join-id')
			}, 
			operator: $(selection[1]).val() || 'equals', 
			match: { value: $(selection[2]).val() || '' } 
		});
	};



	// Validation
	// ==================================================
	// It's easy to create invalid models with the UI, 
	// usually by leaving a required field blank. Rather
	// than display validation errors to the user, we
	// just ignore any invalid models when building the 
	// query.

	Join.prototype.validate = function(attr) {
		if (!attr.joinId) {
			// Assume isRoot. Check that table exists in schema.
			var join = tables.findWhere({ name: attr.name });
			if (!join) { return 'Invalid join'; }
		}

		else {
			// Check exists in schema & can be joined from source.
			var join   = qb.joinSet.collection.get(attr.joinId);
			var name   = join ? join.get('name') : false;
			var table  = tables.findWhere({ name: name });
			var joins  = table ? table.get('joins') : false;
			var joined = _.findWhere(joins || [], { name: attr.name });
			if (!joined) { return 'Invalid join.'; }
		} 
	};


	// Check that selected field exists in schema.
	Select.prototype.validate = function(attr) {
		var join      = qb.joinSet.collection.get(attr.joinId);
		var joinTable = tables.findWhere({ name: join ? join.get('name') : false });
		var columns   = joinTable ? joinTable.get('columns') : [];
		var selected  = _.findWhere(columns, { name: attr.name });
		if (!selected) { return 'Invalid selection.'; }
	};


	// Check that field exists in schema.
	Where.prototype.validate = function(attr) {
		var join      = qb.joinSet.collection.get(attr.field.joinId);
		var joinTable = tables.findWhere({ name: join ? join.get('name') : false });
		var columns   = joinTable ? joinTable.get('columns') : [];
		var selected  = _.findWhere(columns, { name: attr.field.name });
		if (!selected) { return 'Invalid filter.'; }
	};



	// Collections
	// ==================================================
	// Selects, joins, etc. are all stored in their own
	// collection. The special Tables collection is
	// generated by Query Builder server side and
	// populated locally with a fetch(). It is a map of 
	// the db, primarily used to join tables.

	var Joins   = Backbone.Collection.extend();
	var Selects = Backbone.Collection.extend();
	var Wheres  = Backbone.Collection.extend();
	var Tables  = Backbone.Collection.extend({
		model: Table, url: '/api/schema'
	});

	var tables = new Tables();



	// Extend Backbone View
	// ==================================================
	// These helper functions will be available to every
	// view in the app.

	// Default init behavior. Listen() is a recyclable
	// function meant to contain event listener setup.

	Backbone.View.prototype.initialize = function(params) {
		_.extend(this, params);
		this.childViews = [];
		this.listen();
	};


	// Make the DB schema available inside all templates.
	Backbone.View.prototype.tables = tables;


	// Default render behavior.
	Backbone.View.prototype.render = function() {
		this.$el.html(this.template(this));
		this.trigger('render');
		this.delegateEvents(this.events);
		return this;
	};


	// Noop to be overwritten with listener declarations.
	Backbone.View.prototype.listen = function() {};


	// Overwrite default remove function so that it also
	// removes models from collections and self from parent.

	Backbone.View.prototype.remove = function() {
		if (this.model && this.collection) {
			this.collection.remove(this.model);
		}

		if (this.parent) {
			var index = this.parent.childViews.indexOf(this);
			this.parent.childViews.splice(index, 1);
		}

		this.$el.remove();
		this.stopListening();
		return this;
	};


	// Call remove recursively on each childView and
	// remove from parent collection.

	Backbone.View.prototype.removeChildren = function() {
    _.each(this.childViews, function(child) {
      child.removeChildren();
    });
    this.remove();
    this.childViews = [];
    return this;
	};


	// Call render on this and every childView in array.
	Backbone.View.prototype.renderChildren = function() {
		var that = this;
    _.each(this.childViews, function(child) {
      child.render().$el.appendTo(that.$('.content').first());
      child.renderChildren.call(child);
    });
    return this;
	};



	// QueryBuilder View
	// ==================================================
	// QueryBuilder (initialized as qb) is the root view
	// of the app.


	var QueryBuilder = Backbone.View.extend({
		el: '#app-goes-here',
		template: require('./templates/query-builder.jade'),
		events: { 'submit': 'build', 'click .add-filter': 'addFilter' }
	});


	QueryBuilder.prototype.listen = function() {
		var that = this;

		// QueryBuilder attaches an event listener to
		// its own render event.
		this.listenTo(this, 'render', function() {

			// Create and render a JoinSet (a fieldset
			// of JOIN inputs)

			that.joinSet = new JoinSet({ 
				el: '.joins',
				isRoot: true,
				collection: new Joins(),
			});
			that.joinSet.render();

			// Construct a SelectSet (fieldset of SELECT
			// inputs) but do not render it yet.

			that.selectSet = new SelectSet({ 
				el: '.selects',
				isRoot: true,
				collection: new Selects()
			});

			// Fieldset of WHERE's, not rendered yet.
			that.whereSet = new WhereSet({
				el: '.wheres',
				isRoot: true,
				collection: new Wheres()
			});

		});
	};


	// Build SQL
	// ==================================================
	// Submit collections to server and display result.


	// Submit form and fetch SQL from server.
	QueryBuilder.prototype.build = function(e) {
		e.preventDefault();
		var that = this;

		if (!this.result) { this.result = new Result(); }

		// Validate each collection and remove invalid models.
		_.each([this.joinSet, this.selectSet, this.whereSet], function(set) {
			set.collection.each(function(model) {
				if (!model.isValid()) { set.collection.remove(model); }
			});
		});

		// Don't submit query if joins collection is empty.
		if (this.joinSet.collection.isEmpty()) {
			that.result.status = 'error';
			that.result.result = 'Query includes no tables.';
			return that.result.render();
		}

		// Build query object 
		this.query = {
			joins   : this.joinSet.collection.toJSON(),
			selects : this.selectSet.collection.toJSON(),
			wheres  : this.whereSet.collection.toJSON()
		};

		// Post stringified data to server.
		var queryString = JSON.stringify(this.query);
		var req = $.post('/api/build', { data: queryString });

		// On successful POST.
		req.done(function(res) {
			_.extend(that.result, res);
			that.result.render();
		});

		// Assume request only fails if Node isn't running.
		req.fail(function(err, status) {
			that.result.status = 'browserOnly';
			that.result.render();
		});
	};



	QueryBuilder.prototype.addFilter = function(e) {
		this.whereSet.render();
	};


	// Construct QueryBuilder view in global scope.
	window.qb = new QueryBuilder();



	// Result View
	// ==================================================
	// A simple panel for displaying QB results/errors.

	var Result = Backbone.View.extend({
		template: require('./templates/result.jade'),
		el: '#result'
	});



	// Input View Base Class
	// ==================================================
	// Join, select, filter, and group views are all very
	// similar. To keep things nice and DRY, all four
	// inherit their functionality from the generic base
	// class, InputView. A single inputView corresponds
	// to a single SQL clause represented by a single
	// Backbone model.

	var InputView = Backbone.View.extend();


	InputView.prototype.events = {
		'change select, input' : 'selectInput',
		'click .add-btn'       : 'addInput',
		'click .remove-btn'    : 'removeInput'
	};


	// When the joinSet updates, rebuild all models.
	InputView.prototype.listen = function() {
		var that = this;
		this.listenTo(qb.joinSet.collection, 'add remove change', function() {
			that.selectInput();
		});
	};


	InputView.prototype.removeInput = function(e) {
		e.stopImmediatePropagation();
		this.removeChildren().remove();

		var parentIsFieldset = this.parent instanceof Fieldset;
		var parentIsEmpty    = _.isEmpty(this.parent.childViews);

		if (parentIsFieldset && parentIsEmpty) {
			this.parent.remove();
		}
	};


	// Add a new input group to the DOM.
	InputView.prototype.addInput = function(e) {
		e.stopImmediatePropagation();

		// If this is the top view in a fieldset.
		if (this.isRoot) {
			var siblingView = new this.View({
				ParentView: this.ParentView,
				View: this.View,
				parent: this,
				collection: this.collection
			});

			var targetEl = this.parent.$('.content').first();
			this.childViews.push(siblingView);
			siblingView.render().$el.appendTo(targetEl);
		}

		else {
			var fieldset = new this.ParentView({
				collection: this.collection,
				model: this.model,
				parent: this
			});

			this.childViews.push(fieldset);
			fieldset.render().$el.appendTo(this.$('.content').first());
		}
	};


	// Create/set this.model from user selections in the DOM.
	InputView.prototype.selectInput = function(e) {
		if (e) { e.stopImmediatePropagation(); }
		var that = this;


		var model = this.model;
		if (!model) { model = new this.Model({ id: Number(_.uniqueId()) }); }

		var selections = this.$('select, input');
		model.setAttributes(selections);

		if (model.isValid()) {
			this.model = model;
			this.collection.add(model);
		}

		this.render().renderChildren();
	};


	InputView.prototype.functionsList = [
		{ 
			group: 'Default', 
			options: [
				{ label: 'Each', value: '' }
			]
		},{ 
			group: 'Aggregators', 
			options: [
				{ label: 'Count of', value: 'count' }, 
				{ label: 'Sum of', value: 'sum' }] 
		},{ 
			group: 'Date formatters', 
			options: [
				{ label: 'Day of', value: 'day' }, 
				{ label: 'Month of', value: 'month' }, 
				{ label: 'Quarter of', value: 'quarter' }, 
				{ label: 'Year of', value: 'quarter' }
			]
		}
	];

	InputView.prototype.operators = [
		{ label: 'Equals', value: 'equals' },
		{ label: 'Does not equal', value: 'notEqual' },
		{ label: 'Greater than', value: 'gt' },
		{ label: 'Greater or equal to', value: 'gte' },
		{ label: 'Less than', value: 'lt' },
		{ label: 'Less or equal to', value: 'lte' }
	];



	// Input Views
	// ==================================================

	var JoinView = InputView.extend({
		template: require('./templates/join.jade'),
		Model: Join
	});


	var SelectView = InputView.extend({
		template: require('./templates/select.jade'),
		Model: Select
	});


	var WhereView = InputView.extend({
		template: require('./templates/where.jade'),
		Model: Where
	});



	// Fieldset Views
	// ==================================================

	var Fieldset = Backbone.View.extend({
		template: require('./templates/fieldset.jade')
	});


	// When fieldset is rendered, rerender or create
	// child view(s).

	Fieldset.prototype.listen = function() {
		var that = this;
		this.listenTo(this, 'render', function() {

			// If children already exist, render them and return.
			if (that.childViews.length > 0) {
				return that.renderChildren();
			}

			// Else create a new childView and render it.
			var childView = new that.ChildView({
				View: that.ChildView,
				ParentView: that.View,
				isRoot: true,
				parent: that,
				collection: that.collection
			});

			that.childViews.push(childView);
			childView.render().$el.appendTo(that.$('.content').first());
		});
	};


	var JoinSet = Fieldset.extend({
		ChildView: JoinView,
		label: 'Include'
	});

	JoinSet.prototype.View = JoinSet;


	var SelectSet = Fieldset.extend({
		ChildView: SelectView,
		label: 'Select'
	});

	SelectSet.prototype.listen = function() {
		Fieldset.prototype.listen.call(this);
		this.listenToOnce(qb.joinSet.collection, 'add', this.render);
		this.listenTo(qb.joinSet.collection, 'add remove change', this.renderChildren);
	};

	SelectSet.prototype.View = SelectSet;


	var WhereSet = Fieldset.extend({
		ChildView: WhereView,
		label: 'Filter'
	});

	WhereSet.prototype.listen = function() {
		Fieldset.prototype.listen.call(this);
		this.listenTo(qb.joinSet.collection, 'add remove change', this.renderChildren);
	};

	WhereSet.prototype.View = WhereSet;



	// Start app
	// ==================================================
	// Fetch the schema then render the root view. This
	// code is meant to run regardless of whether
	// QueryBuilder is actually available via API (on
	// Github Pages for example), so if the fetch to the
	// server fails, use cached schema instead. This
	// way the UI will function normally, though it will
	// not be able to reach the server to retrive SQL.

	var browserOnly = false;
	var cachedSchema = require('./cached-schema.json');

	window.tables = tables;

	tables.on('sync', function()  { qb.render(); });
	tables.on('error', function() { useCachedSchema(); });
	tables.fetch();

	function useCachedSchema() {
		tables.reset(cachedSchema);
		browserOnly = true;
		qb.render();
	}


})()
},{"./cached-schema.json":2,"./templates/fieldset.jade":3,"./templates/join.jade":4,"./templates/query-builder.jade":5,"./templates/result.jade":6,"./templates/select.jade":7,"./templates/where.jade":8}],2:[function(require,module,exports){
module.exports=[
 {
  "name": "users",
  "as": "Users",
  "columns": [
   {
    "name": "id",
    "as": "User ID"
   },
   {
    "name": "name",
    "as": "Full name"
   },
   {
    "name": "created_at",
    "as": "Join date"
   }
  ],
  "joins": [
   {
    "name": "posts",
    "source_key": "id",
    "target_key": "user_id"
   },
   {
    "name": "comments",
    "source_key": "id",
    "target_key": "user_id"
   }
  ]
 },
 {
  "name": "posts",
  "as": "Blog Posts",
  "columns": [
   {
    "name": "id",
    "as": "Post ID"
   },
   {
    "name": "user_id",
    "as": "Author"
   },
   {
    "name": "text",
    "as": "Text"
   },
   {
    "name": "created_at",
    "as": "Post Date"
   }
  ],
  "joins": [
   {
    "name": "users",
    "as": "Author",
    "source_key": "user_id",
    "target_key": "id"
   },
   {
    "name": "comments",
    "source_key": "id",
    "target_key": "post_id"
   },
   {
    "name": "tags",
    "source_key": "id",
    "target_key": "id",
    "via": "posts_tags"
   }
  ]
 },
 {
  "name": "comments",
  "as": "Comments",
  "columns": [
   {
    "name": "id",
    "as": "Comment ID"
   },
   {
    "name": "post_id",
    "as": "Post ID"
   },
   {
    "name": "user_id",
    "as": "User ID"
   },
   {
    "name": "message",
    "as": "Comment"
   },
   {
    "name": "created_at",
    "as": "Comment Date"
   }
  ],
  "joins": [
   {
    "name": "users",
    "source_key": "user_id",
    "target_key": "id"
   },
   {
    "name": "posts",
    "source_key": "post_id",
    "target_key": "id"
   }
  ]
 },
 {
  "name": "tags",
  "as": "Tags",
  "columns": [
   {
    "name": "id",
    "as": "Tag ID"
   },
   {
    "name": "tag",
    "as": "Tag"
   }
  ],
  "joins": [
   {
    "name": "users",
    "as": "Related authors",
    "source_key": "id",
    "target_key": "id",
    "via": "posts_tags"
   },
   {
    "name": "posts",
    "as": "Related posts",
    "source_key": "id",
    "target_key": "id",
    "via": "posts_tags"
   }
  ]
 }
]
},{}],3:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (label) {
buf.push("<fieldset><legend>" + (jade.escape((jade_interp = label) == null ? '' : jade_interp)) + "</legend><div class=\"content\"></div></fieldset>");}.call(this,"label" in locals_for_with?locals_for_with.label:typeof label!=="undefined"?label:undefined));;return buf.join("");
};
},{"jade/runtime":10}],4:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (isRoot, parent, tables, model) {
buf.push("<div class=\"form-group\">");
var labelText = isRoot ? 'Include:' : 'and:'
buf.push("<label class=\"col-sm-1 col-xs-12 control-label\">" + (jade.escape((jade_interp = labelText) == null ? '' : jade_interp)) + "</label><div class=\"col-sm-3 col-xs-12\"><select name=\"model\" class=\"form-control\"><option disabled=\"disabled\" selected=\"selected\">something");
if ( isRoot && !parent.model)
{
// iterate tables.toJSON()
;(function(){
  var $$obj = tables.toJSON();
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var table = $$obj[$index];

var isSelected = model && table.name === model.get('name')
var joinId = parent.model ? parent.model.id : false
buf.push("<option" + (jade.attr("value", table.name, true, false)) + (jade.attr("data-join-id", joinId, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = table.as) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var table = $$obj[$index];

var isSelected = model && table.name === model.get('name')
var joinId = parent.model ? parent.model.id : false
buf.push("<option" + (jade.attr("value", table.name, true, false)) + (jade.attr("data-join-id", joinId, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = table.as) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

}
else
{
var joinables = tables.get(parent.model.get('name')).get('joins')
// iterate joinables
;(function(){
  var $$obj = joinables;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var joinable = $$obj[$index];

var isSelected = model && joinable.name === model.get('name')
var joinDef    = tables.get(joinable.name)
var joinAlias  = joinable.as || joinDef.get('as') || joinable.name
buf.push("<option" + (jade.attr("value", joinable.name, true, false)) + (jade.attr("data-join-id", parent.model.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = joinAlias) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var joinable = $$obj[$index];

var isSelected = model && joinable.name === model.get('name')
var joinDef    = tables.get(joinable.name)
var joinAlias  = joinable.as || joinDef.get('as') || joinable.name
buf.push("<option" + (jade.attr("value", joinable.name, true, false)) + (jade.attr("data-join-id", parent.model.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = joinAlias) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

}
buf.push("</option></select></div><div class=\"btn-group col-sm-8 col-xs-12\">");
if ( (model))
{
buf.push("<a href=\"#\" class=\"add-btn btn btn-default\"><span class=\"glyphicon glyphicon-plus\"></span></a>");
}
if ( (parent.model))
{
buf.push("<a href=\"#\" class=\"remove-btn btn btn-default\"><span class=\"glyphicon glyphicon-minus\"></span></a>");
}
buf.push("</div></div><div class=\"content\"></div>");}.call(this,"isRoot" in locals_for_with?locals_for_with.isRoot:typeof isRoot!=="undefined"?isRoot:undefined,"parent" in locals_for_with?locals_for_with.parent:typeof parent!=="undefined"?parent:undefined,"tables" in locals_for_with?locals_for_with.tables:typeof tables!=="undefined"?tables:undefined,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
};
},{"jade/runtime":10}],5:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<form role=\"form\" class=\"form-horizontal\"><div class=\"joins\"></div><div class=\"selects\"></div><div class=\"wheres\"><button type=\"button\" class=\"btn btn-link add-filter\">Add filter</button></div><div id=\"result\"></div><br/><button type=\"submit\" class=\"btn btn-success\">Build SQL</button></form>");;return buf.join("");
};
},{"jade/runtime":10}],6:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (status, result) {
if ( status === 'error')
{
buf.push("<pre class=\"bg-danger\">" + (jade.escape((jade_interp = result) == null ? '' : jade_interp)) + "</pre>");
}
else if ( status === 'success')
{
buf.push("<pre>" + (jade.escape((jade_interp = result) == null ? '' : jade_interp)) + "</pre>");
}
else if ( status === 'browserOnly')
{
buf.push("<pre class=\"bg-warning\"><strong>Node server not found.</strong><br/>You're probably viewing this app on <strong>GitHub pages. </strong>To fully demo the app you'll need to run it locally. \nDon't worry, this is pretty easy. With Node and NPM installed, simply clone the repo then:<br/><br/><em>npm install; npm install -g gulp; gulp start;</em></pre>");
}
else
{
buf.push("<pre class=\"bg-info\">Unknown error.</pre>");
}}.call(this,"status" in locals_for_with?locals_for_with.status:typeof status!=="undefined"?status:undefined,"result" in locals_for_with?locals_for_with.result:typeof result!=="undefined"?result:undefined));;return buf.join("");
};
},{"jade/runtime":10}],7:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (isRoot, qb, tables, model, functionsList) {
buf.push("<div class=\"form-group\">");
var labelText = isRoot ? 'Select:' : 'and:'
buf.push("<label class=\"col-sm-1 col-xs-12 control-label\">" + (jade.escape((jade_interp = labelText) == null ? '' : jade_interp)) + "</label><div class=\"col-sm-3 col-xs-12\"><select name=\"model\" class=\"form-control\"><option disabled=\"disabled\" selected=\"selected\">...");
var joinable = qb.joinSet.collection.toJSON()
// iterate joinable
;(function(){
  var $$obj = joinable;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var join = $$obj[$index];

var joinAlias = join.as || join.name
buf.push("<optgroup" + (jade.attr("label", joinAlias, true, false)) + ">");
var joinableCols = tables.get(join.name).get('columns')
// iterate joinableCols
;(function(){
  var $$obj = joinableCols;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var column = $$obj[$index];

var isSelected = model && model.get('joinId') === join.id && model.get('name') === column.name
var colAlias = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var column = $$obj[$index];

var isSelected = model && model.get('joinId') === join.id && model.get('name') === column.name
var colAlias = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var join = $$obj[$index];

var joinAlias = join.as || join.name
buf.push("<optgroup" + (jade.attr("label", joinAlias, true, false)) + ">");
var joinableCols = tables.get(join.name).get('columns')
// iterate joinableCols
;(function(){
  var $$obj = joinableCols;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var column = $$obj[$index];

var isSelected = model && model.get('joinId') === join.id && model.get('name') === column.name
var colAlias = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var column = $$obj[$index];

var isSelected = model && model.get('joinId') === join.id && model.get('name') === column.name
var colAlias = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  }
}).call(this);

buf.push("</option></select></div><div class=\"col-sm-3 col-xs-12\"><select name=\"aggregate\" class=\"form-control\">");
// iterate functionsList
;(function(){
  var $$obj = functionsList;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var optgroup = $$obj[$index];

buf.push("<optgroup" + (jade.attr("label", optgroup.group, true, false)) + ">");
// iterate optgroup.options
;(function(){
  var $$obj = optgroup.options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

var isSelected = model && model.get('functions') === option.value
buf.push("<option" + (jade.attr("value", option.value, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = option.label) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

var isSelected = model && model.get('functions') === option.value
buf.push("<option" + (jade.attr("value", option.value, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = option.label) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var optgroup = $$obj[$index];

buf.push("<optgroup" + (jade.attr("label", optgroup.group, true, false)) + ">");
// iterate optgroup.options
;(function(){
  var $$obj = optgroup.options;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var option = $$obj[$index];

var isSelected = model && model.get('functions') === option.value
buf.push("<option" + (jade.attr("value", option.value, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = option.label) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var option = $$obj[$index];

var isSelected = model && model.get('functions') === option.value
buf.push("<option" + (jade.attr("value", option.value, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = option.label) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  }
}).call(this);

buf.push("</select></div><div class=\"col-sm-3 col-xs-12 checkbox\"><label>");
var isChecked = model && model.get('groupBy')
buf.push("<input type=\"checkbox\"" + (jade.attr("checked", isChecked, true, false)) + "/>Group results by</label></div><div class=\"btn-group col-sm-2 col-xs-12\">");
if ( (isRoot && model))
{
buf.push("<a href=\"#\" class=\"add-btn btn btn-default\"><span class=\"glyphicon glyphicon-plus\"></span></a>");
}
if ( !isRoot)
{
buf.push("<a href=\"#\" class=\"remove-btn btn btn-default\"><span class=\"glyphicon glyphicon-minus\"></span></a>");
}
buf.push("</div></div><div class=\"content\"></div>");}.call(this,"isRoot" in locals_for_with?locals_for_with.isRoot:typeof isRoot!=="undefined"?isRoot:undefined,"qb" in locals_for_with?locals_for_with.qb:typeof qb!=="undefined"?qb:undefined,"tables" in locals_for_with?locals_for_with.tables:typeof tables!=="undefined"?tables:undefined,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined,"functionsList" in locals_for_with?locals_for_with.functionsList:typeof functionsList!=="undefined"?functionsList:undefined));;return buf.join("");
};
},{"jade/runtime":10}],8:[function(require,module,exports){
var jade = require("jade/runtime");

module.exports = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (isRoot, qb, tables, model, operators) {
buf.push("<div class=\"form-group\">");
var labelText = isRoot ? 'Filter:' : 'and:'
buf.push("<label class=\"col-sm-1 col-xs-12 control-label\">" + (jade.escape((jade_interp = labelText) == null ? '' : jade_interp)) + "</label><div class=\"col-sm-3 col-xs-12\"><select name=\"model\" class=\"form-control\"><option selected=\"selected\">No filter");
var joinable = qb.joinSet.collection.toJSON()
// iterate joinable
;(function(){
  var $$obj = joinable;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var join = $$obj[$index];

var joinAlias = join.as || join.name
buf.push("<optgroup" + (jade.attr("label", joinAlias, true, false)) + ">");
var joinableCols = tables.get(join.name).get('columns')
// iterate joinableCols
;(function(){
  var $$obj = joinableCols;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var column = $$obj[$index];

var isSelected = model && model.get('field').joinId === join.id && model.get('field').name === column.name
var colAlias   = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var column = $$obj[$index];

var isSelected = model && model.get('field').joinId === join.id && model.get('field').name === column.name
var colAlias   = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var join = $$obj[$index];

var joinAlias = join.as || join.name
buf.push("<optgroup" + (jade.attr("label", joinAlias, true, false)) + ">");
var joinableCols = tables.get(join.name).get('columns')
// iterate joinableCols
;(function(){
  var $$obj = joinableCols;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var column = $$obj[$index];

var isSelected = model && model.get('field').joinId === join.id && model.get('field').name === column.name
var colAlias   = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var column = $$obj[$index];

var isSelected = model && model.get('field').joinId === join.id && model.get('field').name === column.name
var colAlias   = column.as || column.name;
buf.push("<option" + (jade.attr("value", column.name, true, false)) + (jade.attr("data-join-id", join.id, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = colAlias) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</optgroup>");
    }

  }
}).call(this);

buf.push("</option></select></div><div class=\"col-sm-3 col-xs-12\"><select name=\"operator\" class=\"form-control\">");
// iterate operators
;(function(){
  var $$obj = operators;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var op = $$obj[$index];

var isSelected = model && model.get('operator') === op.value
buf.push("<option" + (jade.attr("value", op.value, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = op.label) == null ? '' : jade_interp)) + "</option>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var op = $$obj[$index];

var isSelected = model && model.get('operator') === op.value
buf.push("<option" + (jade.attr("value", op.value, true, false)) + (jade.attr("selected", isSelected, true, false)) + ">" + (jade.escape((jade_interp = op.label) == null ? '' : jade_interp)) + "</option>");
    }

  }
}).call(this);

buf.push("</select></div><div class=\"col-sm-3 col-xs-12\">");
var value = model ? model.get('match').value : ''
buf.push("<input type=\"text\" name=\"match\"" + (jade.attr("value", value, true, false)) + " class=\"form-control\"/></div><div class=\"btn-group col-sm-2 col-xs-12\">");
if ( (isRoot && model))
{
buf.push("<a href=\"#\" class=\"add-btn btn btn-default\"><span class=\"glyphicon glyphicon-plus\"></span></a>");
}
if ( !isRoot)
{
buf.push("<a href=\"#\" class=\"remove-btn btn btn-default\"><span class=\"glyphicon glyphicon-minus\"></span></a>");
}
buf.push("</div></div><div class=\"content\"></div>");}.call(this,"isRoot" in locals_for_with?locals_for_with.isRoot:typeof isRoot!=="undefined"?isRoot:undefined,"qb" in locals_for_with?locals_for_with.qb:typeof qb!=="undefined"?qb:undefined,"tables" in locals_for_with?locals_for_with.tables:typeof tables!=="undefined"?tables:undefined,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined,"operators" in locals_for_with?locals_for_with.operators:typeof operators!=="undefined"?operators:undefined));;return buf.join("");
};
},{"jade/runtime":10}],9:[function(require,module,exports){

},{}],10:[function(require,module,exports){
(function (global){
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.jade=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = function merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = merge(attrs, a[i]);
    }
    return attrs;
  }
  var ac = a['class'];
  var bc = b['class'];

  if (ac || bc) {
    ac = ac || [];
    bc = bc || [];
    if (!Array.isArray(ac)) ac = [ac];
    if (!Array.isArray(bc)) bc = [bc];
    a['class'] = ac.concat(bc).filter(nulls);
  }

  for (var key in b) {
    if (key != 'class') {
      a[key] = b[key];
    }
  }

  return a;
};

/**
 * Filter null `val`s.
 *
 * @param {*} val
 * @return {Boolean}
 * @api private
 */

function nulls(val) {
  return val != null && val !== '';
}

/**
 * join array as classes.
 *
 * @param {*} val
 * @return {String}
 */
exports.joinClasses = joinClasses;
function joinClasses(val) {
  return Array.isArray(val) ? val.map(joinClasses).filter(nulls).join(' ') : val;
}

/**
 * Render the given classes.
 *
 * @param {Array} classes
 * @param {Array.<Boolean>} escaped
 * @return {String}
 */
exports.cls = function cls(classes, escaped) {
  var buf = [];
  for (var i = 0; i < classes.length; i++) {
    if (escaped && escaped[i]) {
      buf.push(exports.escape(joinClasses([classes[i]])));
    } else {
      buf.push(joinClasses(classes[i]));
    }
  }
  var text = joinClasses(buf);
  if (text.length) {
    return ' class="' + text + '"';
  } else {
    return '';
  }
};

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = function attr(key, val, escaped, terse) {
  if ('boolean' == typeof val || null == val) {
    if (val) {
      return ' ' + (terse ? key : key + '="' + key + '"');
    } else {
      return '';
    }
  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
  } else if (escaped) {
    return ' ' + key + '="' + exports.escape(val) + '"';
  } else {
    return ' ' + key + '="' + val + '"';
  }
};

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} escaped
 * @return {String}
 */
exports.attrs = function attrs(obj, terse){
  var buf = [];

  var keys = Object.keys(obj);

  if (keys.length) {
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i]
        , val = obj[key];

      if ('class' == key) {
        if (val = joinClasses(val)) {
          buf.push(' ' + key + '="' + val + '"');
        }
      } else {
        buf.push(exports.attr(key, val, false, terse));
      }
    }
  }

  return buf.join('');
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

exports.escape = function escape(html){
  var result = String(html)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
  if (result === '' + html) return html;
  else return result;
};

/**
 * Re-throw the given `err` in context to the
 * the jade in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @api private
 */

exports.rethrow = function rethrow(err, filename, lineno, str){
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  try {
    str = str || require('fs').readFileSync(filename, 'utf8')
  } catch (ex) {
    rethrow(err, null, lineno)
  }
  var context = 3
    , lines = str.split('\n')
    , start = Math.max(lineno - context, 0)
    , end = Math.min(lines.length, lineno + context);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Jade') + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};

},{"fs":2}],2:[function(require,module,exports){

},{}]},{},[1])(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"fs":9}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
